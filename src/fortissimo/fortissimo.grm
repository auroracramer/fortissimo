%ignore /[ \t\v\f\r\n]+/
%ignore /#.*/

%%

Start -> Statements %{ return n1.val  %}
      ;

Statements -> Statements S %{ return n1.val + [n2.val] %}
           |  S %{ return [n1.val] %}
           |  _
           ;

S -> Phrase %{ return n1.val %}
  |  'Play' PhraseList %{ return ['play', n2.val] %}
  |  ID 'is' ID %{ return ['asgn', n1.val, n3.val] %}
  | 'Playing' ID %{ return ['playing', n2.val] %}
  | 'Playing' ID 'in' 'Octave' Num %{ return ['playing-in', n2.val, n5.val] %}
  | 'Notes' NoteList %{ return ['notes', n2.val] %}
  | 'Key of' ID %{ return ['key', n2.val, "major"] %}
  | 'Key of' ID ID %{ return ['key', n2.val, n3.val] %}
  | 'Meter of' Meter %{ return ['meter', (int(n2.val[0]), int(n2.val[2]))] %}
  ;

PhraseList -> PhraseList ID %{ return n1.val + [n2.val] %}
	| ID %{ return [n1.val] %}
	;

Phrase -> '|' PhraseHeader Statements '||' %{ return ['phrase-def', n2.val, [], n3.val] %}
       ;

PhraseHeader -> ID %{return n1.val %}
             |  _
             ;

NoteList -> NoteList Note %{ return n1.val + [n2.val] %}
         |  Note %{ return [n1.val] %}
         ;

Note -> Num %{return ['scale-note', n1.val] %}
  | NumDuration %{return ['scale-duration-note', int(n1.val[:-1]), n1.val[-1]] %}
  ;

NumDuration -> /\-*[0-9]+[w,h,q,e,s,t]/ %{return n1.val %}
  ;

Num -> /\-*[0-9]+/ %{return int(n1.val) %}
    ;

ID -> /[a-zA-Z_][a-zA-Z_0-9]*/ %{ return n1.val %}
   ;

Meter -> /[0-9]\/[0-9]/ %{ return n1.val %}
  ;
