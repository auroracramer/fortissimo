%ignore /[ \r\t\v\f]+/
%ignore /#.*/
%ignore /(\\\n)*/

%right '='
%left '&&' 
%left '||' 
%left '==' '!=' 
%left '<=' '>=' '>' '<'
%left '+' '-'
%left '*' '/'
%left '.'
%left '(' ')'

%%

Start -> P      %{ return n1.val %}
      ;

P -> Eps Statements Eps     %{ return n2.val %}
  |  NL                     %{ return [] %}
  |  _                      %{ return [] %}
  ;

Eps -> NL
    |  _    %{ return [] %}
    ;

NL -> NL /[\n;]+/
   |  /[\n;]+/
   ;

Statements -> Statements NL S      %{ return n1.val + [n3.val] %}
           |  S                     %{ return [n1.val] %}
           ;




S -> E                                          %{ return ('exp', n1.val) %}
  |  Id '=' E                                   %{ return ('asgn', n1.val, n3.val) %}
  |  'def' Id '=' E                             %{ return ('def', n2.val, n4.val) %}
  |  'def' Id ':' Id '(' IdList ')' '{' P '}'   %{ return ('mdef', n2.val, n4.val, n6.val, n9.val) %}
  |  E '[' E ']' '=' E                          %{ return ('put', n1.val, n3.val, n6.val) %}
  |  E '.' Id '=' E                             %{ return ('put', n1.val, ('string-lit', n3.val), n5.val) %}
  | 'print' E                                   %{ return ('print', n2.val) %}
  | 'error' E                                   %{ return ('error', n2.val) %}
  |  'def' Id '(' IdList ')' '{' P '}'          %{ return ('fdef', n2.val, n4.val, n7.val) %}
  | 'if' '(' E ')' '{' P '}' 'else' '{' P '}'   %{ return ('if', n3.val, n6.val, n10.val) %} 
  | 'if' '(' E ')' '{' P '}'                    %{ return ('if', n3.val, n6.val, None) %}
  | 'while' '(' E ')' '{' P '}'                 %{ return ('while', n3.val, n6.val) %}
  | 'for' '(' Id 'in' E ')' '{' P '}'           %{ return ('for', n3.val, n5.val, n8.val) %}
  ;

E    -> 'null'                                      %{ return ('null',) %}
     |  Num                                         %{ return ('int-lit', n1.val) %}
     |  Id                                          %{ return ('var', n1.val) %}
     |  String                                      %{ return ('string-lit', n1.val) %}
     |  '{' '}'                                     %{ return ('dict-lit', []) %}
     |  '{' TableList '}'                           %{ return ('dict-lit', n2.val) %}
     |  '(' E ')'                         %dprec 1  %{ return n2.val %}

     |  E '+' E                           %dprec 4  %{ return ('+', n1.val, n3.val) %}
     |  E '-' E                           %dprec 4  %{ return ('-', n1.val, n3.val) %}
     |  E '*' E                           %dprec 3  %{ return ('*', n1.val, n3.val) %}
     |  E '/' E                           %dprec 3  %{ return ('/', n1.val, n3.val) %}
     |  E '==' E                          %dprec 5  %{ return ('==', n1.val, n3.val) %}
     |  E '!=' E                          %dprec 5  %{ return ('!=', n1.val, n3.val) %}
     |  E '<=' E                          %dprec 5  %{ return ('<=', n1.val, n3.val) %}
     |  E '>=' E                          %dprec 5  %{ return ('>=', n1.val, n3.val) %}
     |  E '<' E                           %dprec 5  %{ return ('<', n1.val, n3.val) %}
     |  E '>' E                           %dprec 5  %{ return ('>', n1.val, n3.val) %}
     |  E '&&' E                          %dprec 6  %{ return ('&&', n1.val, n3.val) %}
     |  E '||' E                          %dprec 6  %{ return ('||', n1.val, n3.val) %}
     |  E 'in' E                          %dprec 1  %{ return ('in', n1.val, n3.val) %}
     |  E '[' E ']'                       %dprec 1  %{ return ('get', n1.val, n3.val) %}
     |  E '.' Id                          %dprec 1  %{ return ('get', n1.val, ('string-lit', n3.val)) %}
     |  'len' '(' E ')'                   %dprec 2  %{ return ('len', n3.val) %}
     |  '[' E 'for' Id 'in' E ']'                   %{ return ('comprehension', n2.val, n4.val, n6.val) %}
     |  'lambda' '(' IdList ')' '{' P '}'           %{ return ('lambda', n3.val, n6.val) %}
     |  E '(' ExpList ')'                 %dprec 1  %{ return ('call', n1.val, n3.val) %}
     |  E ':' Id '(' ExpList ')'          %dprec 1  %{ return ('mcall', n1.val, n3.val, n5.val) %}
     |  'ite' '(' E ',' E ',' E ')'                 %{ return ('ite', n3.val, n5.val, n7.val) %}
     |  'coroutine' '(' E ')'                       %{ return ('coroutine', n3.val) %}
     |  'resume' '(' E ',' E ')'                    %{ return ('resume', n3.val, n5.val) %}
     |  'yield' '(' E ')'                           %{ return ('yield', n3.val) %}
     |  'input' '(' ')'                             %{ return ('input',) %}
     |  'native' Id '.' Id '(' E ')'                %{ return ('ncall', n2.val, n4.val, n6.val) %}
     ;

TableList -> TableList ',' Id '=' E    %{ return n1.val + [(n3.val,n5.val)] %}
          |  Id '=' E                   %{ return [(n1.val, n3.val)] %}
          ;
IdList -> IdList ',' Id     %{ return n1.val + [n3.val] %}
       |  Id                %{ return [n1.val] %}
       |  _                 %{ return [] %}
       ;
ExpList -> ExpList ',' E    %{ return n1.val + [n3.val] %}
        |  E                %{ return [n1.val] %}
        |  _                %{ return [] %}
        ;

Num -> /[0-9]+/                     %{ return int(n1.val) %}
    ;
Id  -> /[a-zA-Z_][a-zA-Z_0-9]*/     %{ return n1.val %}
    ;
String -> /"[^"]*"|'[^']*'/         %{ return n1.val[1:-1] %}
       ;
